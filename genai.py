import google.generativeai as genai
import os
from dotenv import load_dotenv
from db import get_messages_from_db 
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

load_dotenv()
ai_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=os.getenv('GEN_API'))
model = genai.GenerativeModel("gemini-2.0-flash")

async def analyze_messages(days: int = 30) -> str:
    # –¥–æ—Å—Ç–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î
    messages = await get_messages_from_db()

    if not messages:
        return "–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    text_data = "\n".join(messages)

    prompt = f"""
    –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–æ–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:
    {text_data}

    –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:
    1. –ö–∞–∫–∏–µ —Ç–µ–º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è?
    2. –ö–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å?
    3. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.
    """

    # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
    response = await model.generate_content_async(prompt)
    return response.text

@ai_router.message(Command("analyze"))
async def analyze_command(message: Message):
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    analysis = await analyze_messages(30)
    await message.answer(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:\n\n{analysis}")
